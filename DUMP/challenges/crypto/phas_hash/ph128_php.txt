function PH128($InputString)
{
    /////////////////////////////////////////////////////////
    // PH128 : PhasHash-128
    // This function generates a 128 bit hash value from the
    // Input String.
    // 
    // IMPORTANT: This algorithm has been designed by Phas to 
    // be easily broken, so its security is not good and must 
    // be used only for educational purposes
    /////////////////////////////////////////////////////////
    
    // Set the initial hash value
    $HashValue = array(0xF345A2CB, 0xF62C7DBD, 0x6D3240D5, 0xA8175D7D);
    
    // Get the length of the Input String
    $len = strlen($InputString);
    
    // If the input string is not a multiple of 4, fill with "*" untill next multiple of 4
    if ($len%4 > 0)
    {
        $len += 4 - $len%4;
        $InputString = str_pad($InputString, $len, "*");
    }
    
    // Get the length of the input string XOR'd against all the chars in the string.
    $RndValue = $len%256;
    for($CharIndex=0; $CharIndex < strlen($InputString); $CharIndex++)
        $RndValue ^= ord($InputString[$CharIndex]);

    // Take the chars of the input string in groups of 4
    for($FourCharsIdx = 0; $FourCharsIdx < strlen($InputString); $FourCharsIdx += 4)
    {
        // Calculate a 32 bit number from the current 4 chars
        $FourCharsNumber = 0;
        for($k = 0; $k < 4; $k++)
            $FourCharsNumber = $FourCharsNumber * 256 + ord($InputString[$FourCharsIdx+$k]);

        // XOR each part of the HASH value against the 32 bit number multiplied by the
        // RndValue previously calculated
        for($HashPart = 0; $HashPart < 4; $HashPart++)
            $HashValue[$HashPart] ^= $FourCharsNumber*$RndValue;
    }
    // Construct the resulting string value from the hexadecimal values of the hash
    $res = "";
    for($HashPart = 0; $HashPart < 4; $HashPart++)
        $res .= str_pad(dechex($HashValue[$HashPart]),8,"0",STR_PAD_LEFT);

    return $res;
}
